{"pageProps":{"post":{"attributes":{"description":"Understand the importance of namespaces and cgroups for security and resource management in server environments. Learn how namespaces can isolate processes to enhance security and prevent unauthorized access in shared server environments, beyond what chroot alone provides.","keywords":["namespaces","cgroups","security","resource management","chroot","process isolation","server environment"]},"html":"<p>While chroot is a pretty straightforward, namespaces and cgroups are a bit more nebulous to understand but no less important. Both of these next two features are for security and resource management.</p>\n<p>Let&#39;s say you&#39;re running a big server that&#39;s in your home and you&#39;re selling space to customers (that you don&#39;t know) to run their code on your server. What sort of concerns would you have about running their &quot;untrusted&quot; code? Let&#39;s say you have Alice and Bob who are running e-commerce services dealing with lots of money. They themselves are good citizens of the servers and minding their own business. But then you have Eve join the server who has other intentions: she wants to steal money, source code, and whatever else she can get her hands on from your other tenants on the server. If just gave all three them unfettered root access to server, what&#39;s to stop Eve from taking everything? Or what if she just wants to disrupt their businesses, even if she&#39;s not stealing anything?</p>\n<p>Your first line of defense is that you could log them into chroot&#39;d environments and limit them to only those. Great! Now they can&#39;t see each others&#39; files. Problem solved? Well, no, not quite yet. Despite the fact that she can&#39;t see the files, she can still see all the processes going on on the computer. She can kill processes, unmount filesystem and even hijack processes.</p>\n<p>Enter namespaces. Namespaces allow you to hide processes from other processes. If we give each chroot&#39;d environment different sets of namespaces, now Alice, Bob, and Eve can&#39;t see each others&#39; processes (they even get different process PIDs, or process IDs, so they can&#39;t guess what the others have) and you can&#39;t steal or hijack what you can&#39;t see!</p>\n<p>There&#39;s a lot more depth to namespaces beyond what I&#39;ve outlined here. The above is describing <em>just</em> the PID namespace. There are more namespaces as well and this will help these containers stay isloated from each other.</p>\n<h2>The problem with chroot alone</h2>\n<p>Now, this isn&#39;t secure. The only thing we&#39;ve protected is the file system, mostly.</p>\n<ol>\n<li>chroot in a terminal into our environment</li>\n<li>In another terminal, run <code>docker exec -it docker-host bash</code>. This will get another terminal session #2 for us (I&#39;ll refer to the chroot&#39;d environment as #1)</li>\n<li>Run <code>tail -f /my-new-root/secret.txt &amp;</code> in #2. This will start an infinitely running process in the background.</li>\n<li>Run <code>ps</code> to see the process list in #2 and see the <code>tail</code> process running. Copy the PID (process ID) for the tail process.</li>\n<li>In #1, the chroot&#39;d shell, run <code>kill &lt;PID you just copied&gt;</code>. This will kill the tail process from inside the <code>chroot&#39;d</code> environment. This is a problem because that means chroot isn&#39;t enough to isolate someone. We need more barriers. This is just one problem, processes, but it&#39;s illustrative that we need more isolation beyond just the file system.</li>\n</ol>\n<h2>Safety with namespaces</h2>\n<p>So let&#39;s create a chroot&#39;d environment now that&#39;s isolated using namespaces using a new command: <code>unshare</code>. <code>unshare</code> creates a new isolated namespace from its parent (so you, the server provider can&#39;t spy on Bob nor Alice either) and all other future tenants. Run this:</p>\n<p><strong>NOTE</strong>: This next command downloads about 150MB and takes at least a few minutes to run. Unlike Docker images, this will redownload it <em>every</em> time you run it and does no caching.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># from our chroot&#x27;d environment if you&#x27;re still running it, if not skip this</span>\n<span class=\"hljs-built_in\">exit</span>\n\n<span class=\"hljs-comment\">## Install debootstrap</span>\napt-get update -y\napt-get install debootstrap -y\ndebootstrap --variant=minbase jammy /better-root\n\n<span class=\"hljs-comment\"># head into the new namespace&#x27;d, chroot&#x27;d environment</span>\nunshare --mount --uts --ipc --net --pid --fork --user --map-root-user <span class=\"hljs-built_in\">chroot</span> /better-root bash <span class=\"hljs-comment\"># this also chroot&#x27;s for us</span>\nmount -t proc none /proc <span class=\"hljs-comment\"># process namespace</span>\nmount -t sysfs none /sys <span class=\"hljs-comment\"># filesystem</span>\nmount -t tmpfs none /tmp <span class=\"hljs-comment\"># filesystem</span>\n</code></pre><p>This will create a new environment that&#39;s isolated on the system with its own PIDs, mounts (like storage and volumes), and network stack. Now we can&#39;t see any of the processes!</p>\n<p>Now try our previous exercise again.</p>\n<ol>\n<li>Run <code>tail -f /my-new-root/secret.txt &amp;</code> from #2 (not the unshare env)</li>\n<li>Run <code>ps</code> from #1, grab pid for <code>tail</code></li>\n<li>Run <code>kill &lt;pid for tail&gt;</code>, see that it doesn&#39;t work</li>\n</ol>\n<p>We used namespaces to protect our processes! We could explore the other namespaces but know it&#39;s a similar exercise: using namespaces to restrict capabilities of containers to interfering with other containers (both for nefarious purposes and to protect ourselves from ourselves.)</p>\n","markdown":"\nWhile chroot is a pretty straightforward, namespaces and cgroups are a bit more nebulous to understand but no less important. Both of these next two features are for security and resource management.\n\nLet's say you're running a big server that's in your home and you're selling space to customers (that you don't know) to run their code on your server. What sort of concerns would you have about running their \"untrusted\" code? Let's say you have Alice and Bob who are running e-commerce services dealing with lots of money. They themselves are good citizens of the servers and minding their own business. But then you have Eve join the server who has other intentions: she wants to steal money, source code, and whatever else she can get her hands on from your other tenants on the server. If just gave all three them unfettered root access to server, what's to stop Eve from taking everything? Or what if she just wants to disrupt their businesses, even if she's not stealing anything?\n\nYour first line of defense is that you could log them into chroot'd environments and limit them to only those. Great! Now they can't see each others' files. Problem solved? Well, no, not quite yet. Despite the fact that she can't see the files, she can still see all the processes going on on the computer. She can kill processes, unmount filesystem and even hijack processes.\n\nEnter namespaces. Namespaces allow you to hide processes from other processes. If we give each chroot'd environment different sets of namespaces, now Alice, Bob, and Eve can't see each others' processes (they even get different process PIDs, or process IDs, so they can't guess what the others have) and you can't steal or hijack what you can't see!\n\nThere's a lot more depth to namespaces beyond what I've outlined here. The above is describing _just_ the PID namespace. There are more namespaces as well and this will help these containers stay isloated from each other.\n\n## The problem with chroot alone\n\nNow, this isn't secure. The only thing we've protected is the file system, mostly.\n\n1. chroot in a terminal into our environment\n1. In another terminal, run `docker exec -it docker-host bash`. This will get another terminal session #2 for us (I'll refer to the chroot'd environment as #1)\n1. Run `tail -f /my-new-root/secret.txt &` in #2. This will start an infinitely running process in the background.\n1. Run `ps` to see the process list in #2 and see the `tail` process running. Copy the PID (process ID) for the tail process.\n1. In #1, the chroot'd shell, run `kill <PID you just copied>`. This will kill the tail process from inside the `chroot'd` environment. This is a problem because that means chroot isn't enough to isolate someone. We need more barriers. This is just one problem, processes, but it's illustrative that we need more isolation beyond just the file system.\n\n## Safety with namespaces\n\nSo let's create a chroot'd environment now that's isolated using namespaces using a new command: `unshare`. `unshare` creates a new isolated namespace from its parent (so you, the server provider can't spy on Bob nor Alice either) and all other future tenants. Run this:\n\n**NOTE**: This next command downloads about 150MB and takes at least a few minutes to run. Unlike Docker images, this will redownload it _every_ time you run it and does no caching.\n\n```bash\n# from our chroot'd environment if you're still running it, if not skip this\nexit\n\n## Install debootstrap\napt-get update -y\napt-get install debootstrap -y\ndebootstrap --variant=minbase jammy /better-root\n\n# head into the new namespace'd, chroot'd environment\nunshare --mount --uts --ipc --net --pid --fork --user --map-root-user chroot /better-root bash # this also chroot's for us\nmount -t proc none /proc # process namespace\nmount -t sysfs none /sys # filesystem\nmount -t tmpfs none /tmp # filesystem\n```\n\nThis will create a new environment that's isolated on the system with its own PIDs, mounts (like storage and volumes), and network stack. Now we can't see any of the processes!\n\nNow try our previous exercise again.\n\n1. Run `tail -f /my-new-root/secret.txt &` from #2 (not the unshare env)\n1. Run `ps` from #1, grab pid for `tail`\n1. Run `kill <pid for tail>`, see that it doesn't work\n\nWe used namespaces to protect our processes! We could explore the other namespaces but know it's a similar exercise: using namespaces to restrict capabilities of containers to interfering with other containers (both for nefarious purposes and to protect ourselves from ourselves.)\n","slug":"namespaces","title":"Namespaces","section":"Crafting Containers by Hand","icon":"hand-holding-heart","filePath":"/home/runner/work/complete-intro-to-containers-v2/complete-intro-to-containers-v2/lessons/02-crafting-containers-by-hand/C-namespaces.md","nextSlug":"/lessons/crafting-containers-by-hand/cgroups","prevSlug":"/lessons/crafting-containers-by-hand/chroot"}},"__N_SSG":true}