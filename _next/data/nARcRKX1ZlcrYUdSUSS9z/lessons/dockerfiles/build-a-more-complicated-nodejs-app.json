{"pageProps":{"post":{"attributes":{"title":"Build a More Complicated Node.js App","description":"Learn how to containerize a Node.js app using Fastify, npm, and Docker. Follow steps for npm installation, Dockerfile creation, and handling permissions issues within the container.","keywords":["Node.js","Fastify","npm install","Docker","containerize","Dockerfile","permissions issues"]},"html":"<p>Okay, all looking good so far. Let&#39;s make this app go one step further. Let&#39;s have it have an npm install step! In the directory where your app is, put this:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// this is the sample app from fastify.dev</span>\n\n<span class=\"hljs-comment\">// Require the framework and instantiate it</span>\n<span class=\"hljs-keyword\">const</span> fastify = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fastify&quot;</span>)({ <span class=\"hljs-attr\">logger</span>: <span class=\"hljs-literal\">true</span> });\n\n<span class=\"hljs-comment\">// Declare a route</span>\nfastify.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-params\">request, reply</span>) {\n  reply.<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&quot;world&quot;</span> });\n});\n\n<span class=\"hljs-comment\">// Run the server!</span>\nfastify.<span class=\"hljs-title function_\">listen</span>({ <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">8080</span>, <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&quot;0.0.0.0&quot;</span> }, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (err) {\n    fastify.<span class=\"hljs-property\">log</span>.<span class=\"hljs-title function_\">error</span>(err);\n    process.<span class=\"hljs-title function_\">exit</span>(<span class=\"hljs-number\">1</span>);\n  }\n});\n</code></pre><p><a href=\"https://github.com/btholt/project-files-for-complete-intro-to-containers-v2/blob/main/build-a-more-complicated-nodejs-app/index.js\">‚õìÔ∏è Link to the code</a></p>\n<p>This is a <a href=\"https://fastify.dev/\">Fastify</a> server. Fastify is a server-side framework (like Express) for Node.js and one I&#39;ve used several times. This is going to require that we <code>npm install</code> the dependencies. So in your project do the following</p>\n<pre><code class=\"hljs language-bash\">npm init -y <span class=\"hljs-comment\"># this will create a package.json for you without asking any questions</span>\nnpm install fastify\n</code></pre><p><a href=\"https://github.com/btholt/project-files-for-complete-intro-to-containers-v2/blob/main/build-a-more-complicated-nodejs-app/package.json\">‚õìÔ∏è Link to the package.json</a></p>\n<p>Now try running <code>node index.js</code> to run the Node.js server. You should see it running and logging out info whenever you hit an endpoint. Cool, so now that we have a full featured Node.js app, let&#39;s containerize it.</p>\n<p>If we tried to build it and run it right now it&#39;d fail because we didn&#39;t <code>npm install</code> the dependencies. So now right after the <code>COPY</code> we&#39;ll add a <code>RUN</code>.</p>\n<pre><code class=\"hljs language-dockerfile\"><span class=\"hljs-keyword\">FROM</span> node:<span class=\"hljs-number\">20</span>\n\n<span class=\"hljs-keyword\">USER</span> node\n\n<span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /home/node/code</span>\n\n<span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> --<span class=\"hljs-built_in\">chown</span>=node:node . .</span>\n\n<span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> npm ci</span>\n\n<span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;node&quot;</span>, <span class=\"hljs-string\">&quot;index.js&quot;</span>]</span>\n</code></pre><pre><code class=\"hljs language-bash\">docker build -t more-complicated-app .\ndocker run -it -p 8080:8080 --name my-app --<span class=\"hljs-built_in\">rm</span> --init more-complicated-app\n</code></pre><p>We changed the <code>COPY</code> to copy everything in the directory. Right now you probably have a <code>node_modules</code> but if you&#39;re building a container directly from a repo it won&#39;t copy the <code>node_modules</code> so we have to operate under the assumption that those won&#39;t be there. Feel free even to delete them if you want.</p>\n<p>Let&#39;s go ahead and add a <code>.dockerignore</code> file to the root of the project that prevents Docker from copying the <code>node_modules</code>. This has the same format as a <code>.gitignore</code>.</p>\n<pre><code>node_modules/\n.git/\n</code></pre><p>We then added a <code>RUN</code> instruction to run a command inside of the container. If you&#39;re not familiar with <code>npm ci</code> it&#39;s very similar to <code>npm install</code> with a few key differences: it&#39;ll follow the <code>package-lock.json</code> exactly (where <code>npm install</code> will ignore it and update it if newer patch versions of your dependencies are available) and it&#39;ll automatically delete <code>node_modules</code> if it exists. <code>npm ci</code> is made for situations like this.</p>\n<p>Now if you try to build again, it <em>may</em> fail with permissions issues. Why? Well, when you have <code>WORKDIR</code> create a directory, it does so as root (depending on which version of Docker you&#39;re using) which means that the node user won&#39;t have enough permissions to modify that directory. We could either use <code>RUN</code> to change the user or we could use <code>RUN</code> to make the directory in the first place as node. Let&#39;s do the latter.</p>\n<p>Generally it&#39;s encouraged to not rely on <code>WORKDIR</code> to get it right and just do it yourself.</p>\n<pre><code class=\"hljs language-dockerfile\"><span class=\"hljs-keyword\">FROM</span> node:<span class=\"hljs-number\">20</span>\n\n<span class=\"hljs-keyword\">USER</span> node\n\n<span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">mkdir</span> /home/node/code</span>\n\n<span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /home/node/code</span>\n\n<span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> --<span class=\"hljs-built_in\">chown</span>=node:node . .</span>\n\n<span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> npm ci</span>\n\n<span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;node&quot;</span>, <span class=\"hljs-string\">&quot;index.js&quot;</span>]</span>\n</code></pre><p><a href=\"https://github.com/btholt/project-files-for-complete-intro-to-containers-v2/blob/main/build-a-more-complicated-nodejs-app/Dockerfile\">‚õìÔ∏è Link to the Dockerfile</a></p>\n<pre><code class=\"hljs language-bash\">docker build -t more-complicated-app .\ndocker run -it -p 8080:8080 --name my-app --<span class=\"hljs-built_in\">rm</span> --init more-complicated-app\n</code></pre><p>Now try building and running your container. It should work now! Yay!</p>\n<blockquote>\n<p><strong>NOTE:</strong> Make sure you don&#39;t bind your app to host <code>localhost</code> (like if you put <code>localhost</code> instead of <code>0.0.0.0</code> in the host in our Fastify app.) This will make it so the app is only available <em>inside</em> the container. If you see <code>connection reset</code> instead of when you&#39;re expecting a response, this a good candidate for what&#39;s happening (because this definitely didn&#39;t <em>just</em> happen to me üòÇ.) You need to have the <code>host: &quot;0.0.0.0&quot;</code> in your Node.js app</p>\n</blockquote>\n","markdown":"\nOkay, all looking good so far. Let's make this app go one step further. Let's have it have an npm install step! In the directory where your app is, put this:\n\n```javascript\n// this is the sample app from fastify.dev\n\n// Require the framework and instantiate it\nconst fastify = require(\"fastify\")({ logger: true });\n\n// Declare a route\nfastify.get(\"/\", function handler(request, reply) {\n  reply.send({ hello: \"world\" });\n});\n\n// Run the server!\nfastify.listen({ port: 8080, host: \"0.0.0.0\" }, (err) => {\n  if (err) {\n    fastify.log.error(err);\n    process.exit(1);\n  }\n});\n```\n\n[‚õìÔ∏è Link to the code][node-file]\n\nThis is a [Fastify][fastify] server. Fastify is a server-side framework (like Express) for Node.js and one I've used several times. This is going to require that we `npm install` the dependencies. So in your project do the following\n\n```bash\nnpm init -y # this will create a package.json for you without asking any questions\nnpm install fastify\n```\n\n[‚õìÔ∏è Link to the package.json][package-file]\n\nNow try running `node index.js` to run the Node.js server. You should see it running and logging out info whenever you hit an endpoint. Cool, so now that we have a full featured Node.js app, let's containerize it.\n\nIf we tried to build it and run it right now it'd fail because we didn't `npm install` the dependencies. So now right after the `COPY` we'll add a `RUN`.\n\n```dockerfile\nFROM node:20\n\nUSER node\n\nWORKDIR /home/node/code\n\nCOPY --chown=node:node . .\n\nRUN npm ci\n\nCMD [\"node\", \"index.js\"]\n```\n\n```bash\ndocker build -t more-complicated-app .\ndocker run -it -p 8080:8080 --name my-app --rm --init more-complicated-app\n```\n\nWe changed the `COPY` to copy everything in the directory. Right now you probably have a `node_modules` but if you're building a container directly from a repo it won't copy the `node_modules` so we have to operate under the assumption that those won't be there. Feel free even to delete them if you want.\n\nLet's go ahead and add a `.dockerignore` file to the root of the project that prevents Docker from copying the `node_modules`. This has the same format as a `.gitignore`.\n\n```\nnode_modules/\n.git/\n```\n\nWe then added a `RUN` instruction to run a command inside of the container. If you're not familiar with `npm ci` it's very similar to `npm install` with a few key differences: it'll follow the `package-lock.json` exactly (where `npm install` will ignore it and update it if newer patch versions of your dependencies are available) and it'll automatically delete `node_modules` if it exists. `npm ci` is made for situations like this.\n\nNow if you try to build again, it _may_ fail with permissions issues. Why? Well, when you have `WORKDIR` create a directory, it does so as root (depending on which version of Docker you're using) which means that the node user won't have enough permissions to modify that directory. We could either use `RUN` to change the user or we could use `RUN` to make the directory in the first place as node. Let's do the latter.\n\nGenerally it's encouraged to not rely on `WORKDIR` to get it right and just do it yourself.\n\n```dockerfile\nFROM node:20\n\nUSER node\n\nRUN mkdir /home/node/code\n\nWORKDIR /home/node/code\n\nCOPY --chown=node:node . .\n\nRUN npm ci\n\nCMD [\"node\", \"index.js\"]\n```\n\n[‚õìÔ∏è Link to the Dockerfile][dockerfile-file]\n\n```bash\ndocker build -t more-complicated-app .\ndocker run -it -p 8080:8080 --name my-app --rm --init more-complicated-app\n```\n\nNow try building and running your container. It should work now! Yay!\n\n> **NOTE:** Make sure you don't bind your app to host `localhost` (like if you put `localhost` instead of `0.0.0.0` in the host in our Fastify app.) This will make it so the app is only available _inside_ the container. If you see `connection reset` instead of when you're expecting a response, this a good candidate for what's happening (because this definitely didn't _just_ happen to me üòÇ.) You need to have the `host: \"0.0.0.0\"` in your Node.js app\n\n[node-file]: https://github.com/btholt/project-files-for-complete-intro-to-containers-v2/blob/main/build-a-more-complicated-nodejs-app/index.js\n[package-file]: https://github.com/btholt/project-files-for-complete-intro-to-containers-v2/blob/main/build-a-more-complicated-nodejs-app/package.json\n[dockerfile-file]: https://github.com/btholt/project-files-for-complete-intro-to-containers-v2/blob/main/build-a-more-complicated-nodejs-app/Dockerfile\n[fastify]: https://fastify.dev/\n","slug":"build-a-more-complicated-nodejs-app","title":"Build a More Complicated Node.js App","section":"Dockerfiles","icon":"file-lines","filePath":"/home/runner/work/complete-intro-to-containers-v2/complete-intro-to-containers-v2/lessons/04-dockerfiles/C-build-a-more-complicated-nodejs-app.md","nextSlug":"/lessons/dockerfiles/a-note-on-expose","prevSlug":"/lessons/dockerfiles/build-a-nodejs-app"}},"__N_SSG":true}