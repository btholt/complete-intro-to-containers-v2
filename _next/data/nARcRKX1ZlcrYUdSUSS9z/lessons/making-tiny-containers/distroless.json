{"pageProps":{"post":{"attributes":{"description":"Learn about the differences between Alpine and Distroless for Docker containers, focusing on edge cases with Alpine and the stripped-down nature of Distroless. Explore alternative options like Wolfi, Red Hat's Universal Base Image Micro, and Google's Distroless projects, emphasizing security and minimalism.","keywords":["Alpine","Distroless","Docker containers","security","minimalism"]},"html":"<p>You may not want to use Alpine. <a href=\"https://martinheinz.dev/blog/92\">This blog post goes into depth</a> but let me sum it up with two points:</p>\n<ol>\n<li>Alpine made some design choices that have some extremely rare edge cases that can cause failures and be <em>very</em> hard to diagnose. This arises from their choice of replacing the typical <code>glibc</code> with <code>musl</code>. Read the blog post if you want to know more. Suffice to say, unless you&#39;re running Kubernetes at a large scale this shouldn&#39;t concern you; lots of people run Alpine and never see issues.</li>\n<li>Now Alpine isn&#39;t the only option!</li>\n</ol>\n<p>The four projects to look to here, <a href=\"https://wolfi.dev\">Wolfi (an open source project)</a>, <a href=\"https://catalog.redhat.com/software/base-images\">Red Hat&#39;s Universal Base Image Micro</a>, <a href=\"https://hub.docker.com/_/debian\">Debian&#39;s slim variant</a>, and <a href=\"https://github.com/GoogleContainerTools/distroless\">Google&#39;s Distroless</a>.</p>\n<p>You would be set with any of these. We are going to focus on Distroless because it is currently the most popular but feel free to experiment!</p>\n<p>&quot;Distroless&quot; is a bit of a lie as it still based on Debian, but to their point, they&#39;ve stripped away essentially everything except what is 100% necessary to run your containers. This means you need to install <em>everything</em> you need to get running. It means no package manager. It means it is truly as barebones as it can get.</p>\n<p>Let&#39;s build a Node.js distroless image.</p>\n<pre><code class=\"hljs language-dockerfile\"><span class=\"hljs-comment\"># build stage</span>\n<span class=\"hljs-keyword\">FROM</span> node:<span class=\"hljs-number\">20</span> AS node-builder\n<span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /build</span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> package-lock.json package.json ./</span>\n<span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> npm ci</span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> . .</span>\n\n<span class=\"hljs-comment\"># runtime stage</span>\n<span class=\"hljs-keyword\">FROM</span> gcr.io/distroless/nodejs20\n<span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> --from=node-builder --<span class=\"hljs-built_in\">chown</span>=node:node /build /app</span>\n<span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span>\n<span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;index.js&quot;</span>]</span>\n</code></pre><p><a href=\"https://github.com/btholt/project-files-for-complete-intro-to-containers-v2/blob/main/distroless/Dockerfile\">⛓️ Link to the Dockerfile</a></p>\n<pre><code class=\"hljs language-bash\">docker build -t my-distroless .\ndocker run -it -p 8080:8080 --name my-app --<span class=\"hljs-built_in\">rm</span> --init my-distroless\n</code></pre><p>The size (according to my computer) was about 175MB, so not necessarily any smaller than Alpine, but it is indeed using a Debian-derivative Linux instead of Alpine which does exclude a class of rare-but-possible bugs! These days I tend to use Distroless images but honestly I&#39;m fine with anything you choose here. Probably by the time you <em>need</em> something other than an Alpine image you will have 100x surpassed my knowledge and skills with containers or have a whole dev ops org to attend to these nuances.</p>\n<p>One note with the Dockerfile: notice we <em>just</em> give it the Node.js file and <em>not</em> the Node.js command. The Distroless container locks it down so it can only run Node.js apps and cannot be given any other command. Just another way they are hyper-focused for security in production.</p>\n","markdown":"\nYou may not want to use Alpine. [This blog post goes into depth][blog] but let me sum it up with two points:\n\n1. Alpine made some design choices that have some extremely rare edge cases that can cause failures and be _very_ hard to diagnose. This arises from their choice of replacing the typical `glibc` with `musl`. Read the blog post if you want to know more. Suffice to say, unless you're running Kubernetes at a large scale this shouldn't concern you; lots of people run Alpine and never see issues.\n1. Now Alpine isn't the only option!\n\nThe four projects to look to here, [Wolfi (an open source project)][wolfi], [Red Hat's Universal Base Image Micro][ubi], [Debian's slim variant][slim], and [Google's Distroless][distroless].\n\nYou would be set with any of these. We are going to focus on Distroless because it is currently the most popular but feel free to experiment!\n\n\"Distroless\" is a bit of a lie as it still based on Debian, but to their point, they've stripped away essentially everything except what is 100% necessary to run your containers. This means you need to install _everything_ you need to get running. It means no package manager. It means it is truly as barebones as it can get.\n\nLet's build a Node.js distroless image.\n\n```dockerfile\n# build stage\nFROM node:20 AS node-builder\nWORKDIR /build\nCOPY package-lock.json package.json ./\nRUN npm ci\nCOPY . .\n\n# runtime stage\nFROM gcr.io/distroless/nodejs20\nCOPY --from=node-builder --chown=node:node /build /app\nWORKDIR /app\nCMD [\"index.js\"]\n```\n\n[⛓️ Link to the Dockerfile][dockerfile-file]\n\n```bash\ndocker build -t my-distroless .\ndocker run -it -p 8080:8080 --name my-app --rm --init my-distroless\n```\n\nThe size (according to my computer) was about 175MB, so not necessarily any smaller than Alpine, but it is indeed using a Debian-derivative Linux instead of Alpine which does exclude a class of rare-but-possible bugs! These days I tend to use Distroless images but honestly I'm fine with anything you choose here. Probably by the time you _need_ something other than an Alpine image you will have 100x surpassed my knowledge and skills with containers or have a whole dev ops org to attend to these nuances.\n\nOne note with the Dockerfile: notice we _just_ give it the Node.js file and _not_ the Node.js command. The Distroless container locks it down so it can only run Node.js apps and cannot be given any other command. Just another way they are hyper-focused for security in production.\n\n[blog]: https://martinheinz.dev/blog/92\n[wolfi]: https://wolfi.dev\n[distroless]: https://github.com/GoogleContainerTools/distroless\n[ubi]: https://catalog.redhat.com/software/base-images\n[node-file]: https://github.com/btholt/project-files-for-complete-intro-to-containers-v2/blob/main/distroless/index.js\n[dockerfile-file]: https://github.com/btholt/project-files-for-complete-intro-to-containers-v2/blob/main/distroless/Dockerfile\n[slim]: https://hub.docker.com/_/debian\n","slug":"distroless","title":"Distroless","section":"Making Tiny Containers","icon":"minimize","filePath":"/home/runner/work/complete-intro-to-containers-v2/complete-intro-to-containers-v2/lessons/05-making-tiny-containers/D-distroless.md","nextSlug":"/lessons/making-tiny-containers/static-asset-project","prevSlug":"/lessons/making-tiny-containers/multi-stage-builds"}},"__N_SSG":true}