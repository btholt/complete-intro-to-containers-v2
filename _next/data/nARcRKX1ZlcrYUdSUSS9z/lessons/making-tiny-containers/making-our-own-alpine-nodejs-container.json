{"pageProps":{"post":{"attributes":{"title":"Making Our Own Alpine Node.js Container","description":"Learn how to create a custom Node.js Alpine container by installing system dependencies and setting up a minimal Linux container with Node.js and npm. Explore steps to optimize the container size and user setup, mirroring practices from official containers.","keywords":["Node.js Alpine container","Dockerfile tutorial","system dependencies installation","Alpine Linux setup","custom container optimization"]},"html":"<h2>Making our own Node.js Alpine container</h2>\n<p>Let&#39;s take this exercise a bit further. Let&#39;s actually make our own Node.js Alpine container. NOTE: I&#39;d suggest <strong>always</strong> using the official one. They&#39;ll keep it up to date with security fixes and they&#39;re <em>real</em> good at making containers. Better than I am, anyway. But this is a good exercise for us to go through to learn how to install system dependencies.</p>\n<p>Start with this in a new Dockerfile.</p>\n<pre><code class=\"hljs language-dockerfile\"><span class=\"hljs-keyword\">FROM</span> alpine:<span class=\"hljs-number\">3.19</span>\n\n<span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apk add --update nodejs npm</span>\n</code></pre><p><code>alpine:latest</code> would nab you the latest Alpine (3.19 as of writing, if you run into issues with versions, continue with <code>alpine:3.19</code> instead of <code>alpine:latest</code>. Otherwise feel free to truck on with <code>alpine:latest</code>)</p>\n<p><code>RUN apk add --update nodejs npm</code> will use the Alpine package manager to grab Node.js and npm (they&#39;re bundled separately for Alpine.)</p>\n<pre><code class=\"hljs language-bash\">docker build -t my-node .\n</code></pre><p>If you encounter error like this</p>\n<pre><code class=\"hljs language-bash\">/home/node/code/node_modules/@hapi/hapi/lib/core.js:51\n    actives = new WeakMap();                                                   // Active requests being processed\n            ^\n\nSyntaxError: Unexpected token =\n</code></pre><p>Try using <code>nodejs-current</code> instead of <code>nodejs</code></p>\n<pre><code class=\"hljs language-dockerfile\"><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apk add --update nodejs-current npm</span>\n</code></pre><p>Okay so now if you do <code>docker build -t my-node .</code>. Now try <code>docker run --rm --name my-app -it my-node</code>. In here you should have a pretty bare bones Linux container but both <code>node -v</code> and <code>npm -v</code> should work. I checked and already my container is 72MB.</p>\n<p>Keep in mind that Alpine does not use bash for its shell; it uses a different shell called <code>ash</code> or often just <code>sh</code>. It&#39;s similar enough to bash but there are some differences. It&#39;s not really the point of this class so we&#39;ll keep the focus on learning just what&#39;s necessary.</p>\n<p>Let&#39;s next make our <code>node</code> user.</p>\n<pre><code class=\"hljs language-dockerfile\"><span class=\"hljs-keyword\">FROM</span> alpine:<span class=\"hljs-number\">3.19</span>\n\n<span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apk add --update nodejs npm</span>\n\n<span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> addgroup -S node &amp;&amp; adduser -S node -G node</span>\n\n<span class=\"hljs-keyword\">USER</span> node\n</code></pre><p>I&#39;m mimicking what the Node.js official container does, which is make a user group of <code>node</code> with one user in it, <code>node</code>. Feel free to name them different things if you feel so inclined. Notice we could conceivably combine the two <code>RUN</code> instructions together but it&#39;s generally best practices to keep &quot;ideas&quot; separate. The first <code>RUN</code> installs dependencies, the second one creates the <code>node</code> user. Up to you how you do it, neither is wrong per se.</p>\n<p>Now we can just copy the rest from the previous Dockerfile! Let&#39;s do that.</p>\n<pre><code class=\"hljs language-dockerfile\"><span class=\"hljs-keyword\">FROM</span> alpine:<span class=\"hljs-number\">3.19</span>\n\n<span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apk add --update nodejs npm</span>\n\n<span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> addgroup -S node &amp;&amp; adduser -S node -G node</span>\n\n<span class=\"hljs-keyword\">USER</span> node\n\n<span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">mkdir</span> /home/node/code</span>\n\n<span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /home/node/code</span>\n\n<span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> --<span class=\"hljs-built_in\">chown</span>=node:node package-lock.json package.json ./</span>\n\n<span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> npm ci</span>\n\n<span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> --<span class=\"hljs-built_in\">chown</span>=node:node . .</span>\n\n<span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;node&quot;</span>, <span class=\"hljs-string\">&quot;index.js&quot;</span>]</span>\n</code></pre><p><a href=\"https://github.com/btholt/project-files-for-complete-intro-to-containers-v2/blob/main/make-our-own-alpine-nodejs-container/Dockerfile\">⛓️ Link to the Dockerfile</a></p>\n<p>It works! We&#39;re down to 89MB (compared to 150MB-ish with the official <code>node:20-alpine</code> container). Honestly, I&#39;m not entirely sure what we cut out from the other <code>node:20-alpine</code> container but it&#39;s probably important. Again, I&#39;d stick to the official containers where they exist. But hey, we learned how to add a user and install system dependencies! Let&#39;s make it even small because why the hell not.</p>\n","markdown":"\n## Making our own Node.js Alpine container\n\nLet's take this exercise a bit further. Let's actually make our own Node.js Alpine container. NOTE: I'd suggest **always** using the official one. They'll keep it up to date with security fixes and they're _real_ good at making containers. Better than I am, anyway. But this is a good exercise for us to go through to learn how to install system dependencies.\n\nStart with this in a new Dockerfile.\n\n```dockerfile\nFROM alpine:3.19\n\nRUN apk add --update nodejs npm\n```\n\n`alpine:latest` would nab you the latest Alpine (3.19 as of writing, if you run into issues with versions, continue with `alpine:3.19` instead of `alpine:latest`. Otherwise feel free to truck on with `alpine:latest`)\n\n`RUN apk add --update nodejs npm` will use the Alpine package manager to grab Node.js and npm (they're bundled separately for Alpine.)\n\n```bash\ndocker build -t my-node .\n```\n\nIf you encounter error like this\n\n```bash\n/home/node/code/node_modules/@hapi/hapi/lib/core.js:51\n    actives = new WeakMap();                                                   // Active requests being processed\n            ^\n\nSyntaxError: Unexpected token =\n```\n\nTry using `nodejs-current` instead of `nodejs`\n\n```dockerfile\nRUN apk add --update nodejs-current npm\n```\n\nOkay so now if you do `docker build -t my-node .`. Now try `docker run --rm --name my-app -it my-node`. In here you should have a pretty bare bones Linux container but both `node -v` and `npm -v` should work. I checked and already my container is 72MB.\n\nKeep in mind that Alpine does not use bash for its shell; it uses a different shell called `ash` or often just `sh`. It's similar enough to bash but there are some differences. It's not really the point of this class so we'll keep the focus on learning just what's necessary.\n\nLet's next make our `node` user.\n\n```dockerfile\nFROM alpine:3.19\n\nRUN apk add --update nodejs npm\n\nRUN addgroup -S node && adduser -S node -G node\n\nUSER node\n```\n\nI'm mimicking what the Node.js official container does, which is make a user group of `node` with one user in it, `node`. Feel free to name them different things if you feel so inclined. Notice we could conceivably combine the two `RUN` instructions together but it's generally best practices to keep \"ideas\" separate. The first `RUN` installs dependencies, the second one creates the `node` user. Up to you how you do it, neither is wrong per se.\n\nNow we can just copy the rest from the previous Dockerfile! Let's do that.\n\n```dockerfile\nFROM alpine:3.19\n\nRUN apk add --update nodejs npm\n\nRUN addgroup -S node && adduser -S node -G node\n\nUSER node\n\nRUN mkdir /home/node/code\n\nWORKDIR /home/node/code\n\nCOPY --chown=node:node package-lock.json package.json ./\n\nRUN npm ci\n\nCOPY --chown=node:node . .\n\nCMD [\"node\", \"index.js\"]\n```\n\n[⛓️ Link to the Dockerfile][dockerfile-file]\n\nIt works! We're down to 89MB (compared to 150MB-ish with the official `node:20-alpine` container). Honestly, I'm not entirely sure what we cut out from the other `node:20-alpine` container but it's probably important. Again, I'd stick to the official containers where they exist. But hey, we learned how to add a user and install system dependencies! Let's make it even small because why the hell not.\n\n[dockerfile-file]: https://github.com/btholt/project-files-for-complete-intro-to-containers-v2/blob/main/make-our-own-alpine-nodejs-container/Dockerfile\n","slug":"making-our-own-alpine-nodejs-container","title":"Making Our Own Alpine Node.js Container","section":"Making Tiny Containers","icon":"minimize","filePath":"/home/runner/work/complete-intro-to-containers-v2/complete-intro-to-containers-v2/lessons/05-making-tiny-containers/B-making-our-own-alpine-nodejs-container.md","nextSlug":"/lessons/making-tiny-containers/multi-stage-builds","prevSlug":"/lessons/making-tiny-containers/alpine-linux"}},"__N_SSG":true}