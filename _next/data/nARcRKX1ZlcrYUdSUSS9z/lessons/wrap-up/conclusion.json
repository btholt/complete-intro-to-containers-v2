{"pageProps":{"post":{"attributes":{"description":"Congratulations on completing the Complete Intro to Containers, version 2! This course covers containers, Docker, Kubernetes, and related tools, making systems-level concepts approachable. Topics include Dockerfiles, container optimization, networking, Docker Compose, Kubernetes, and more, providing essential knowledge in today's container-driven workflows.","keywords":["containers","Docker","Kubernetes","Dockerfiles","container optimization","networking","DevOps"]},"html":"<p>That&#39;s it Congratulations on completing the Complete Intro to Containers, version 2. On one hand, I feel like this course is pretty dense and a lot of systems-level stuff is thrown at you in a short amount of time. On the other hand, I feel like all of this stuff is actually more approachable than it seems at first impression. I started doing this stuff when I worked at Microsoft because I wanted to be able to sound intelligent when I spoke to the smart people making Azure work and it turns out I really like it. Every since I&#39;ve always been in and around cloud stuff and it really started with my love for mucking around with containers.</p>\n<p>Let&#39;s review what we talked about:</p>\n<ul>\n<li>What containers are</li>\n<li>chroot and code jails</li>\n<li>Linux namespaces and how to limit processes on the same OS</li>\n<li>cgroups and how to limit resources to processes</li>\n<li>What an image is</li>\n<li>How to build a JavaScript project in Docker</li>\n<li>Docker Desktop and dev tools to use with Docker</li>\n<li>Building Docker images</li>\n<li>Dockerfiles in depth</li>\n<li>How to build containers both for production performance and so they rebuild quickly</li>\n<li>How to make smaller containers</li>\n<li>Alpine and alternative Linux distros</li>\n<li>How to do multi stage builds</li>\n<li>Distroless and other alternatives to Alpine</li>\n<li>A project on building your own static asset server</li>\n<li>Bind mounts and volumes</li>\n<li>Dev containers</li>\n<li>Networking in Docker</li>\n<li>Docker Compose and multi container setups</li>\n<li>Kubernetes and Kompose</li>\n<li>What other tools are out there</li>\n</ul>\n<p>That&#39;s a lot of stuff! Congrats, you are now <em>ahead</em> of the curve on containers and this will serve you whole career. Containers aren&#39;t going anywhere; they&#39;re just becoming a bigger part of our workflows. Every day you interact with dozens if not hundreds of containers in some way. I see that only increasing as everything becomes a deploy target, from fridges to watches to billboards.</p>\n<p>Thanks, and as always, please let me know how you liked the course!</p>\n<p>❤️ <a href=\"https://www.twitter.com/holtbt\">Brian Holt</a></p>\n","markdown":"That's it Congratulations on completing the Complete Intro to Containers, version 2. On one hand, I feel like this course is pretty dense and a lot of systems-level stuff is thrown at you in a short amount of time. On the other hand, I feel like all of this stuff is actually more approachable than it seems at first impression. I started doing this stuff when I worked at Microsoft because I wanted to be able to sound intelligent when I spoke to the smart people making Azure work and it turns out I really like it. Every since I've always been in and around cloud stuff and it really started with my love for mucking around with containers.\n\nLet's review what we talked about:\n\n- What containers are\n- chroot and code jails\n- Linux namespaces and how to limit processes on the same OS\n- cgroups and how to limit resources to processes\n- What an image is\n- How to build a JavaScript project in Docker\n- Docker Desktop and dev tools to use with Docker\n- Building Docker images\n- Dockerfiles in depth\n- How to build containers both for production performance and so they rebuild quickly\n- How to make smaller containers\n- Alpine and alternative Linux distros\n- How to do multi stage builds\n- Distroless and other alternatives to Alpine\n- A project on building your own static asset server\n- Bind mounts and volumes\n- Dev containers\n- Networking in Docker\n- Docker Compose and multi container setups\n- Kubernetes and Kompose\n- What other tools are out there\n\nThat's a lot of stuff! Congrats, you are now _ahead_ of the curve on containers and this will serve you whole career. Containers aren't going anywhere; they're just becoming a bigger part of our workflows. Every day you interact with dozens if not hundreds of containers in some way. I see that only increasing as everything becomes a deploy target, from fridges to watches to billboards.\n\nThanks, and as always, please let me know how you liked the course!\n\n❤️ [Brian Holt][brian]\n\n[brian]: https://www.twitter.com/holtbt\n","slug":"conclusion","title":"Conclusion","section":"Wrap Up","icon":"graduation-cap","filePath":"/home/runner/work/complete-intro-to-containers-v2/complete-intro-to-containers-v2/lessons/08-wrap-up/B-conclusion.md","nextSlug":null,"prevSlug":"/lessons/wrap-up/docker-alternatives"}},"__N_SSG":true}