{"pageProps":{"post":{"attributes":{"description":"Learn how to work with Docker images without Docker by unpacking, exporting, and creating a new isolated environment manually through commands. Understand the core concepts behind Docker such as namespace isolation, cgroups limitation, and chroot environment while exploring functionalities like networking and volumes.","keywords":["Docker images","Docker Hub","container environment","namespace isolation","cgroups","chroot","environment setup"]},"html":"<p>These pre-made containers are called <em>images</em>. They basically dump out the state of the container, package that up, and store it so you can use it later. So let&#39;s go nab one of these image and run it! We&#39;re going to do it first without Docker to show you that you actually already knows what&#39;s going on.</p>\n<p>First thing, let&#39;s go grab a container off of Docker Hub. Let&#39;s grab the latest Node.js container that runs Ubuntu.</p>\n<h3>Docker Images without Docker</h3>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># start docker contaier with docker running in it connected to host docker daemon</span>\ndocker run -ti -v /var/run/docker.sock:/var/run/docker.sock --privileged --<span class=\"hljs-built_in\">rm</span> --name docker-host docker:26.0.1-cli\n\n<span class=\"hljs-comment\"># run stock alpine container</span>\ndocker run --<span class=\"hljs-built_in\">rm</span> -dit --name my-alpine alpine:3.19.1 sh\n\n<span class=\"hljs-comment\"># export running container&#x27;s file system</span>\ndocker <span class=\"hljs-built_in\">export</span> -o dockercontainer.tar my-alpine\n\n<span class=\"hljs-comment\"># make container-root directory, export contents of container into it</span>\n<span class=\"hljs-built_in\">mkdir</span> container-root\ntar xf dockercontainer.tar -C container-root/\n\n<span class=\"hljs-comment\"># make a contained user, mount in name spaces</span>\nunshare --mount --uts --ipc --net --pid --fork --user --map-root-user <span class=\"hljs-built_in\">chroot</span> <span class=\"hljs-variable\">$PWD</span>/container-root ash <span class=\"hljs-comment\"># this also does chroot for us</span>\nmount -t proc none /proc\nmount -t sysfs none /sys\nmount -t tmpfs none /tmp\n\n<span class=\"hljs-comment\"># here&#x27;s where you&#x27;d do all the cgroup rules making with the settings you wanted to</span>\n<span class=\"hljs-comment\"># we&#x27;re not going to since we did it all in the last lesson</span>\n</code></pre><p>So, this isn&#39;t totally it. Docker does a lot more for you than just this like networking, volumes, and other things but suffice to say this core of what Docker is doing for you: creating a new environment that&#39;s isolated by namespace and limited by cgroups and chroot&#39;ing you into it. So why did we go through all this ceremony? Well, it&#39;s because I want you to understand what Docker is doing for you, know that you <em>could</em> do it by hand but since there&#39;s a tool that does for you you don&#39;t want to. I hold a strong personal belief that tools people need to understand their tools and what they do for them. Every tool you add to your environment adds complexity but should also add ease. If you don&#39;t understand the complexity the tool is solving, you resent it and don&#39;t get to fully appreciate nor take advantage of what the tool can fully offer.</p>\n<p>So how often will you do what we just did? Never. 99.9% of container-utilizers have no idea this is what&#39;s happening under the hood. But now that you know it will make you embrace the complexity that Docker adds because you can see why you have it.</p>\n","markdown":"\nThese pre-made containers are called _images_. They basically dump out the state of the container, package that up, and store it so you can use it later. So let's go nab one of these image and run it! We're going to do it first without Docker to show you that you actually already knows what's going on.\n\nFirst thing, let's go grab a container off of Docker Hub. Let's grab the latest Node.js container that runs Ubuntu.\n\n### Docker Images without Docker\n\n```bash\n# start docker contaier with docker running in it connected to host docker daemon\ndocker run -ti -v /var/run/docker.sock:/var/run/docker.sock --privileged --rm --name docker-host docker:26.0.1-cli\n\n# run stock alpine container\ndocker run --rm -dit --name my-alpine alpine:3.19.1 sh\n\n# export running container's file system\ndocker export -o dockercontainer.tar my-alpine\n\n# make container-root directory, export contents of container into it\nmkdir container-root\ntar xf dockercontainer.tar -C container-root/\n\n# make a contained user, mount in name spaces\nunshare --mount --uts --ipc --net --pid --fork --user --map-root-user chroot $PWD/container-root ash # this also does chroot for us\nmount -t proc none /proc\nmount -t sysfs none /sys\nmount -t tmpfs none /tmp\n\n# here's where you'd do all the cgroup rules making with the settings you wanted to\n# we're not going to since we did it all in the last lesson\n```\n\nSo, this isn't totally it. Docker does a lot more for you than just this like networking, volumes, and other things but suffice to say this core of what Docker is doing for you: creating a new environment that's isolated by namespace and limited by cgroups and chroot'ing you into it. So why did we go through all this ceremony? Well, it's because I want you to understand what Docker is doing for you, know that you _could_ do it by hand but since there's a tool that does for you you don't want to. I hold a strong personal belief that tools people need to understand their tools and what they do for them. Every tool you add to your environment adds complexity but should also add ease. If you don't understand the complexity the tool is solving, you resent it and don't get to fully appreciate nor take advantage of what the tool can fully offer.\n\nSo how often will you do what we just did? Never. 99.9% of container-utilizers have no idea this is what's happening under the hood. But now that you know it will make you embrace the complexity that Docker adds because you can see why you have it.\n","slug":"docker-images","title":"Docker Images","section":"Docker","icon":"fish","filePath":"/home/runner/work/complete-intro-to-containers-v2/complete-intro-to-containers-v2/lessons/03-docker/A-docker-images.md","nextSlug":"/lessons/docker/docker-images-with-docker","prevSlug":"/lessons/crafting-containers-by-hand/cgroups"}},"__N_SSG":true}