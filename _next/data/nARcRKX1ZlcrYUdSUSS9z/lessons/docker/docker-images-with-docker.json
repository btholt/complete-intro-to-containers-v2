{"pageProps":{"post":{"attributes":{"description":"Learn how to use Docker to run and interact with container images like Alpine and Ubuntu, execute commands within containers, manage running containers in the background, and clean up containers efficiently.","keywords":["Docker","container images","Alpine","Ubuntu","running containers","manage containers","clean up containers"]},"html":"<h3>Docker Images with Docker</h3>\n<p>So it&#39;s much easier to do what we did with Docker. Run this command:</p>\n<pre><code class=\"hljs language-bash\">docker run --interactive --<span class=\"hljs-built_in\">tty</span> alpine:3.19.1\n<span class=\"hljs-comment\"># or, to be shorter: docker run -it alpine:3.19.1</span>\n</code></pre><p>A bit easier to remember, right? This will drop you into a Alpine ash shell inside of a container as the root user of that container. When you&#39;re done, just run <code>exit</code> or hit CTRL+D. Notice that this will grab the <a href=\"https://www.alpinelinux.org/\">alpine</a> image from Docker for you and run it. The <code>run</code> part of the command is telling Docker you&#39;re going to be executing a container (as opposed to building it.) The <code>-it</code> part says you want to be dropped into the container interactively so you can run commands and inspect the container. By default containers run and then exit as soon as they&#39;re done. Go ahead and try <code>docker run alpine:3.19.1</code>. It&#39;ll look it did nothing but it actually starts the container and then, because it has nothing defined for it to do, it just exits.</p>\n<p>So what if you wanted it to execute something? Try this:</p>\n<pre><code class=\"hljs language-bash\">docker run alpine:3.19.1 <span class=\"hljs-built_in\">ls</span>\n</code></pre><p>Or let&#39;s switch to Ubuntu now, since it&#39;s more familiar to most. We&#39;ll talk about Alpine later on in-depth.</p>\n<pre><code class=\"hljs language-bash\">docker run ubuntu:jammy <span class=\"hljs-built_in\">ls</span>\n</code></pre><p>The <code>ls</code> part at the end is what you pass into the container to be run. As you can see here, it executes the command, outputs the results, and shuts down the container. This is great for running a Node.js server. Since it doesn&#39;t exit, it&#39;ll keep running until the server crashes or the server exits itself.</p>\n<p>So now what if we want to detach the container running from the foreground? Let&#39;s try that.</p>\n<pre><code class=\"hljs language-bash\">docker run --detach -it ubuntu:jammy <span class=\"hljs-comment\"># or, to be shorter: docker run -dit ubuntu:jammy</span>\n</code></pre><p>So it prints a long hash out and then nothing. Oh no! What happened to it!? Well, it&#39;s running in the background. So how do we get ahold of it?</p>\n<pre><code class=\"hljs language-bash\">docker ps\n</code></pre><p>This will print out all the running containers that Docker is managing for you. You should see your container there. So copy the ID or the name and say:</p>\n<pre><code class=\"hljs language-bash\">docker attach &lt;ID or name&gt; <span class=\"hljs-comment\"># e.g. `docker attach 20919c49d6e5` would attach to that container</span>\n</code></pre><p>This allows you to attach a shell to a running container and mess around with it. Useful if you need to inspect something or see running logs. Feel free to type <code>exit</code> to get out of here. Run <code>docker run -dit ubuntu:jammy</code> one more time. Let&#39;s kill this container without attaching to it. Run <code>docker ps</code>, get the IDs or names of the containers you want to kill and say:</p>\n<pre><code class=\"hljs language-bash\">docker <span class=\"hljs-built_in\">kill</span> &lt;IDs or names of containers&gt; <span class=\"hljs-comment\"># e.g. `docker kill fae0f0974d3d 803e1721dad3 20919c49d6e5` would kill those three containers</span>\n</code></pre><h2>--name and --rm</h2>\n<p>Let&#39;s make it a bit easier to keep track of these. Try this</p>\n<pre><code class=\"hljs language-bash\">docker run -dit --name my-ubuntu ubuntu:jammy\ndocker <span class=\"hljs-built_in\">kill</span> my-ubuntu\n</code></pre><p>Now you can refer to these by a name you set. But now if you tried it again, it&#39;d say that <code>my-ubuntu</code> exists. If you run <code>docker ps --all</code> you&#39;ll see that the container exists even if it&#39;s been stopped. That&#39;s because Docker keeps this metadata around until you tell it to stop doing that. You can run <code>docker rm my-ubuntu</code> which will free up that name or you can run <code>docker container prune</code> to free up all existing stopped containers (and free up some disk space.)</p>\n<p>In the future you can just do</p>\n<pre><code class=\"hljs language-bash\">docker run --<span class=\"hljs-built_in\">rm</span> -dit --name my-ubuntu ubuntu:jammy\ndocker <span class=\"hljs-built_in\">kill</span> my-ubuntu\n</code></pre><p>This will automatically clean up the container when it&#39;s done.</p>\n","markdown":"\n### Docker Images with Docker\n\nSo it's much easier to do what we did with Docker. Run this command:\n\n```bash\ndocker run --interactive --tty alpine:3.19.1\n# or, to be shorter: docker run -it alpine:3.19.1\n```\n\nA bit easier to remember, right? This will drop you into a Alpine ash shell inside of a container as the root user of that container. When you're done, just run `exit` or hit CTRL+D. Notice that this will grab the [alpine][alpine] image from Docker for you and run it. The `run` part of the command is telling Docker you're going to be executing a container (as opposed to building it.) The `-it` part says you want to be dropped into the container interactively so you can run commands and inspect the container. By default containers run and then exit as soon as they're done. Go ahead and try `docker run alpine:3.19.1`. It'll look it did nothing but it actually starts the container and then, because it has nothing defined for it to do, it just exits.\n\nSo what if you wanted it to execute something? Try this:\n\n```bash\ndocker run alpine:3.19.1 ls\n```\n\nOr let's switch to Ubuntu now, since it's more familiar to most. We'll talk about Alpine later on in-depth.\n\n```bash\ndocker run ubuntu:jammy ls\n```\n\nThe `ls` part at the end is what you pass into the container to be run. As you can see here, it executes the command, outputs the results, and shuts down the container. This is great for running a Node.js server. Since it doesn't exit, it'll keep running until the server crashes or the server exits itself.\n\nSo now what if we want to detach the container running from the foreground? Let's try that.\n\n```bash\ndocker run --detach -it ubuntu:jammy # or, to be shorter: docker run -dit ubuntu:jammy\n```\n\nSo it prints a long hash out and then nothing. Oh no! What happened to it!? Well, it's running in the background. So how do we get ahold of it?\n\n```bash\ndocker ps\n```\n\nThis will print out all the running containers that Docker is managing for you. You should see your container there. So copy the ID or the name and say:\n\n```bash\ndocker attach <ID or name> # e.g. `docker attach 20919c49d6e5` would attach to that container\n```\n\nThis allows you to attach a shell to a running container and mess around with it. Useful if you need to inspect something or see running logs. Feel free to type `exit` to get out of here. Run `docker run -dit ubuntu:jammy` one more time. Let's kill this container without attaching to it. Run `docker ps`, get the IDs or names of the containers you want to kill and say:\n\n```bash\ndocker kill <IDs or names of containers> # e.g. `docker kill fae0f0974d3d 803e1721dad3 20919c49d6e5` would kill those three containers\n```\n\n## --name and --rm\n\nLet's make it a bit easier to keep track of these. Try this\n\n```bash\ndocker run -dit --name my-ubuntu ubuntu:jammy\ndocker kill my-ubuntu\n```\n\nNow you can refer to these by a name you set. But now if you tried it again, it'd say that `my-ubuntu` exists. If you run `docker ps --all` you'll see that the container exists even if it's been stopped. That's because Docker keeps this metadata around until you tell it to stop doing that. You can run `docker rm my-ubuntu` which will free up that name or you can run `docker container prune` to free up all existing stopped containers (and free up some disk space.)\n\nIn the future you can just do\n\n```bash\ndocker run --rm -dit --name my-ubuntu ubuntu:jammy\ndocker kill my-ubuntu\n```\n\nThis will automatically clean up the container when it's done.\n\n[alpine]: https://www.alpinelinux.org/\n","slug":"docker-images-with-docker","title":"Docker Images with Docker","section":"Docker","icon":"fish","filePath":"/home/runner/work/complete-intro-to-containers-v2/complete-intro-to-containers-v2/lessons/03-docker/B-docker-images-with-docker.md","nextSlug":"/lessons/docker/javascript-on-docker","prevSlug":"/lessons/docker/docker-images"}},"__N_SSG":true}