{"pageProps":{"post":{"attributes":{"title":"Docker CLI","description":"Explore Docker CLI features like pull, push, inspect, and more. Learn how to manage containers efficiently with commands such as pause, unpause, exec, import, export, history, info, top, rm, rmi, logs, restart, and search.","keywords":["Docker CLI","container management","Docker commands","Docker features","Docker container operations"]},"html":"<p>Let&#39;s take a look at some more cool features of the Docker CLI.</p>\n<h3>pull / push</h3>\n<p><code>pull</code> allows you to pre-fetch container to run.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># this just downloads and caches the image, it doesn&#x27;t do anything else with it</span>\ndocker pull jturpin/hollywood\n\n<span class=\"hljs-comment\"># notice it&#x27;s already loaded and cached here; it doesn&#x27;t redownload it</span>\ndocker run -it jturpin/hollywood hollywood\n</code></pre><p>That will pull the hollywood container from the user jturpin&#39;s user account. The second line will execute this fun container which is just meant to look a hacker&#39;s screen in a movie (it doesn&#39;t really do anything than look cool.)</p>\n<blockquote>\n<p>Note: The <code>jturpin/hollywood</code> image has been depricated. These steps should still work, but if you have issues, you can replace that image with <code>bcbcarl/hollywood</code>.</p>\n</blockquote>\n<p><code>push</code> allows you to push containers to whatever registry you&#39;re connected to (probably normally Docker Hub or something like Azure Container Registry or GitHub Container Registry).</p>\n<h3>inspect</h3>\n<pre><code class=\"hljs language-bash\">docker inspect node:20\n</code></pre><p>This will dump out a lot of info about the container. Helpful when figuring out what&#39;s going on with a container</p>\n<h3>pause / unpause</h3>\n<p>As it looks, these pauses or unpause all the processes in a container. Feel free to try</p>\n<pre><code class=\"hljs language-bash\">docker run -dit --name hw --<span class=\"hljs-built_in\">rm</span> jturpin/hollywood hollywood\ndocker ps <span class=\"hljs-comment\"># see container running</span>\ndocker pause hw\ndocker ps <span class=\"hljs-comment\"># see container paused</span>\ndocker unpause hw\ndocker ps <span class=\"hljs-comment\"># see container running again</span>\ndocker <span class=\"hljs-built_in\">kill</span> hw <span class=\"hljs-comment\"># see container is gone</span>\n</code></pre><h3>exec</h3>\n<p>This allows you to execute a command against a running container. This is different from <code>docker run</code> because <code>docker run</code> will start a new container whereas <code>docker exec</code> runs the command in an already-running container.</p>\n<pre><code class=\"hljs language-bash\">docker run -dit --name hw --<span class=\"hljs-built_in\">rm</span> jturpin/hollywood hollywood\n\n<span class=\"hljs-comment\"># see it output all the running processes of the container</span>\ndocker <span class=\"hljs-built_in\">exec</span> hw ps aux\n</code></pre><p>If you haven&#39;t seen <code>ps aux</code> before, it&#39;s a really useful way to see what&#39;s running on your computer. Try running <code>ps aux</code> on your macOS or Linux computer to see everything running.</p>\n<h3>import / export</h3>\n<p>Allows you to dump out your container to a tar ball (which we did above.) You can also import a tar ball as well.</p>\n<h3>history</h3>\n<p>We&#39;ll get into layers in a bit but this allow you to see how this Docker image&#39;s layer composition has changed over time and how recently.</p>\n<pre><code class=\"hljs language-bash\">docker <span class=\"hljs-built_in\">history</span> node:20\n</code></pre><h3>info</h3>\n<p>Dumps a bunch of info about the host system. Useful if you&#39;re on a VM somewhere and not sure what the environment is.</p>\n<pre><code class=\"hljs language-bash\">docker info\n</code></pre><h3>top</h3>\n<p>Allows you to see processes running on a container (similar to what we did above)</p>\n<pre><code class=\"hljs language-bash\">docker run -dit --name my-mongo --<span class=\"hljs-built_in\">rm</span> mongo\ndocker top my-mongo <span class=\"hljs-comment\"># you should see MongoDB running</span>\ndocker <span class=\"hljs-built_in\">kill</span> my-mongo\n</code></pre><h3>rm / rmi</h3>\n<p>If you run <code>docker ps --all</code> it&#39;ll show all containers you&#39;ve stopped running in addition to the runs you&#39;re running. If you want to remove something from this list, you can do <code>docker rm &lt;id or name&gt;</code>.</p>\n<p>You can run <code>docker container prune</code> to remove <em>all</em> of the stopped containers.</p>\n<p>If you want to remove an image from your computer (to save space or whatever) you can run <code>docker rmi mongo</code> and it&#39;ll delete the image from your computer. This isn&#39;t a big deal since you can always reload it again</p>\n<h3>logs</h3>\n<p>Very useful to see the output of one of your running containers.</p>\n<pre><code class=\"hljs language-bash\">docker run --name my-mongo --<span class=\"hljs-built_in\">rm</span> -dit mongo\ndocker logs my-mongo <span class=\"hljs-comment\"># see all the logs</span>\ndocker <span class=\"hljs-built_in\">kill</span> my-mongo\n</code></pre><h3>restart</h3>\n<p>Pretty self explanatory. Will restart a running container</p>\n<h3>search</h3>\n<p>If you want to see if a container exists on Docker Hub (or whatever registry you&#39;re connected to), this will allow you to take a look.</p>\n<pre><code class=\"hljs language-bash\">docker search python <span class=\"hljs-comment\"># see all the various flavors of Python containers you can run</span>\ndocker search node <span class=\"hljs-comment\"># see all the various flavors of Node.js containers you can run</span>\n</code></pre>","markdown":"\nLet's take a look at some more cool features of the Docker CLI.\n\n### pull / push\n\n`pull` allows you to pre-fetch container to run.\n\n```bash\n# this just downloads and caches the image, it doesn't do anything else with it\ndocker pull jturpin/hollywood\n\n# notice it's already loaded and cached here; it doesn't redownload it\ndocker run -it jturpin/hollywood hollywood\n```\n\nThat will pull the hollywood container from the user jturpin's user account. The second line will execute this fun container which is just meant to look a hacker's screen in a movie (it doesn't really do anything than look cool.)\n\n> Note: The `jturpin/hollywood` image has been depricated. These steps should still work, but if you have issues, you can replace that image with `bcbcarl/hollywood`.\n\n`push` allows you to push containers to whatever registry you're connected to (probably normally Docker Hub or something like Azure Container Registry or GitHub Container Registry).\n\n### inspect\n\n```bash\ndocker inspect node:20\n```\n\nThis will dump out a lot of info about the container. Helpful when figuring out what's going on with a container\n\n### pause / unpause\n\nAs it looks, these pauses or unpause all the processes in a container. Feel free to try\n\n```bash\ndocker run -dit --name hw --rm jturpin/hollywood hollywood\ndocker ps # see container running\ndocker pause hw\ndocker ps # see container paused\ndocker unpause hw\ndocker ps # see container running again\ndocker kill hw # see container is gone\n```\n\n### exec\n\nThis allows you to execute a command against a running container. This is different from `docker run` because `docker run` will start a new container whereas `docker exec` runs the command in an already-running container.\n\n```bash\ndocker run -dit --name hw --rm jturpin/hollywood hollywood\n\n# see it output all the running processes of the container\ndocker exec hw ps aux\n```\n\nIf you haven't seen `ps aux` before, it's a really useful way to see what's running on your computer. Try running `ps aux` on your macOS or Linux computer to see everything running.\n\n### import / export\n\nAllows you to dump out your container to a tar ball (which we did above.) You can also import a tar ball as well.\n\n### history\n\nWe'll get into layers in a bit but this allow you to see how this Docker image's layer composition has changed over time and how recently.\n\n```bash\ndocker history node:20\n```\n\n### info\n\nDumps a bunch of info about the host system. Useful if you're on a VM somewhere and not sure what the environment is.\n\n```bash\ndocker info\n```\n\n### top\n\nAllows you to see processes running on a container (similar to what we did above)\n\n```bash\ndocker run -dit --name my-mongo --rm mongo\ndocker top my-mongo # you should see MongoDB running\ndocker kill my-mongo\n```\n\n### rm / rmi\n\nIf you run `docker ps --all` it'll show all containers you've stopped running in addition to the runs you're running. If you want to remove something from this list, you can do `docker rm <id or name>`.\n\nYou can run `docker container prune` to remove _all_ of the stopped containers.\n\nIf you want to remove an image from your computer (to save space or whatever) you can run `docker rmi mongo` and it'll delete the image from your computer. This isn't a big deal since you can always reload it again\n\n### logs\n\nVery useful to see the output of one of your running containers.\n\n```bash\ndocker run --name my-mongo --rm -dit mongo\ndocker logs my-mongo # see all the logs\ndocker kill my-mongo\n```\n\n### restart\n\nPretty self explanatory. Will restart a running container\n\n### search\n\nIf you want to see if a container exists on Docker Hub (or whatever registry you're connected to), this will allow you to take a look.\n\n```bash\ndocker search python # see all the various flavors of Python containers you can run\ndocker search node # see all the various flavors of Node.js containers you can run\n```\n","slug":"docker-cli","title":"Docker CLI","section":"Docker","icon":"fish","filePath":"/home/runner/work/complete-intro-to-containers-v2/complete-intro-to-containers-v2/lessons/03-docker/E-docker-cli.md","nextSlug":"/lessons/dockerfiles/intro-to-dockerfiles","prevSlug":"/lessons/docker/tags"}},"__N_SSG":true}